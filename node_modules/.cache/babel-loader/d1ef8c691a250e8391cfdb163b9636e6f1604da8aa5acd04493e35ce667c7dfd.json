{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useMessageCounter = () => {\n  _s();\n  const [count, setCount] = useState(0);\n  const [sessionId, setSessionId] = useState('');\n\n  // 오늘 날짜 키 생성\n  const getTodayKey = () => {\n    return new Date().toDateString();\n  };\n\n  // 세션 ID 생성 (서버 재시작 감지용)\n  const generateSessionId = () => {\n    return Date.now().toString();\n  };\n\n  // 카운터 초기화\n  useEffect(() => {\n    const today = getTodayKey();\n    const currentSessionId = generateSessionId();\n    const lastSessionId = localStorage.getItem('sessionId');\n\n    // 새로운 세션이거나 하루가 지났으면 카운터 리셋\n    if (!lastSessionId || currentSessionId !== lastSessionId) {\n      const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\n      // 날짜가 바뀌었거나 새 세션이면 오늘 카운터 리셋\n      delete visits[today];\n      localStorage.setItem('dailyVisits', JSON.stringify(visits));\n      localStorage.setItem('sessionId', currentSessionId);\n      setCount(0);\n    } else {\n      const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\n      setCount(visits[today] || 0);\n    }\n    setSessionId(currentSessionId);\n  }, []);\n\n  // 카운터 증가\n  const incrementCounter = () => {\n    const today = getTodayKey();\n    const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\n    const newCount = (visits[today] || 0) + 1;\n    visits[today] = newCount;\n    localStorage.setItem('dailyVisits', JSON.stringify(visits));\n    setCount(newCount);\n    return newCount;\n  };\n\n  // 카운터 리셋 (개발용)\n  const resetCounter = () => {\n    const today = getTodayKey();\n    const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\n    delete visits[today];\n    localStorage.setItem('dailyVisits', JSON.stringify(visits));\n    setCount(0);\n  };\n  return {\n    count,\n    incrementCounter,\n    resetCounter\n  };\n};\n_s(useMessageCounter, \"qZOmHbJHBSWt9896iB3iy/Rj7GI=\");","map":{"version":3,"names":["useState","useEffect","useMessageCounter","_s","count","setCount","sessionId","setSessionId","getTodayKey","Date","toDateString","generateSessionId","now","toString","today","currentSessionId","lastSessionId","localStorage","getItem","visits","JSON","parse","setItem","stringify","incrementCounter","newCount","resetCounter"],"sources":["C:/Develop/unble/daily-start-messages/morning-app-react/src/hooks/useMessageCounter.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useMessageCounter = () => {\r\n  const [count, setCount] = useState(0);\r\n  const [sessionId, setSessionId] = useState('');\r\n\r\n  // 오늘 날짜 키 생성\r\n  const getTodayKey = () => {\r\n    return new Date().toDateString();\r\n  };\r\n\r\n  // 세션 ID 생성 (서버 재시작 감지용)\r\n  const generateSessionId = () => {\r\n    return Date.now().toString();\r\n  };\r\n\r\n  // 카운터 초기화\r\n  useEffect(() => {\r\n    const today = getTodayKey();\r\n    const currentSessionId = generateSessionId();\r\n    const lastSessionId = localStorage.getItem('sessionId');\r\n    \r\n    // 새로운 세션이거나 하루가 지났으면 카운터 리셋\r\n    if (!lastSessionId || currentSessionId !== lastSessionId) {\r\n      const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\r\n      // 날짜가 바뀌었거나 새 세션이면 오늘 카운터 리셋\r\n      delete visits[today];\r\n      localStorage.setItem('dailyVisits', JSON.stringify(visits));\r\n      localStorage.setItem('sessionId', currentSessionId);\r\n      setCount(0);\r\n    } else {\r\n      const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\r\n      setCount(visits[today] || 0);\r\n    }\r\n    \r\n    setSessionId(currentSessionId);\r\n  }, []);\r\n\r\n  // 카운터 증가\r\n  const incrementCounter = () => {\r\n    const today = getTodayKey();\r\n    const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\r\n    const newCount = (visits[today] || 0) + 1;\r\n    \r\n    visits[today] = newCount;\r\n    localStorage.setItem('dailyVisits', JSON.stringify(visits));\r\n    setCount(newCount);\r\n    \r\n    return newCount;\r\n  };\r\n\r\n  // 카운터 리셋 (개발용)\r\n  const resetCounter = () => {\r\n    const today = getTodayKey();\r\n    const visits = JSON.parse(localStorage.getItem('dailyVisits') || '{}');\r\n    delete visits[today];\r\n    localStorage.setItem('dailyVisits', JSON.stringify(visits));\r\n    setCount(0);\r\n  };\r\n\r\n  return {\r\n    count,\r\n    incrementCounter,\r\n    resetCounter\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB,OAAO,IAAIC,IAAI,CAAC,CAAC,CAACC,YAAY,CAAC,CAAC;EAClC,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,OAAOF,IAAI,CAACG,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EAC9B,CAAC;;EAED;EACAZ,SAAS,CAAC,MAAM;IACd,MAAMa,KAAK,GAAGN,WAAW,CAAC,CAAC;IAC3B,MAAMO,gBAAgB,GAAGJ,iBAAiB,CAAC,CAAC;IAC5C,MAAMK,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;;IAEvD;IACA,IAAI,CAACF,aAAa,IAAID,gBAAgB,KAAKC,aAAa,EAAE;MACxD,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;MACtE;MACA,OAAOC,MAAM,CAACL,KAAK,CAAC;MACpBG,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,SAAS,CAACJ,MAAM,CAAC,CAAC;MAC3DF,YAAY,CAACK,OAAO,CAAC,WAAW,EAAEP,gBAAgB,CAAC;MACnDV,QAAQ,CAAC,CAAC,CAAC;IACb,CAAC,MAAM;MACL,MAAMc,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;MACtEb,QAAQ,CAACc,MAAM,CAACL,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9B;IAEAP,YAAY,CAACQ,gBAAgB,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMV,KAAK,GAAGN,WAAW,CAAC,CAAC;IAC3B,MAAMW,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;IACtE,MAAMO,QAAQ,GAAG,CAACN,MAAM,CAACL,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;IAEzCK,MAAM,CAACL,KAAK,CAAC,GAAGW,QAAQ;IACxBR,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,SAAS,CAACJ,MAAM,CAAC,CAAC;IAC3Dd,QAAQ,CAACoB,QAAQ,CAAC;IAElB,OAAOA,QAAQ;EACjB,CAAC;;EAED;EACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMZ,KAAK,GAAGN,WAAW,CAAC,CAAC;IAC3B,MAAMW,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC;IACtE,OAAOC,MAAM,CAACL,KAAK,CAAC;IACpBG,YAAY,CAACK,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACG,SAAS,CAACJ,MAAM,CAAC,CAAC;IAC3Dd,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;EAED,OAAO;IACLD,KAAK;IACLoB,gBAAgB;IAChBE;EACF,CAAC;AACH,CAAC;AAACvB,EAAA,CA/DWD,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}