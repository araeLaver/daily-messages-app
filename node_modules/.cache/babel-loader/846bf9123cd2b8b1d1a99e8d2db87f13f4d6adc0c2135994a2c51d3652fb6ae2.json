{"ast":null,"code":"var _jsxFileName = \"C:\\\\Develop\\\\unble\\\\daily-start-messages\\\\morning-app-react\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport MessageCard from './components/MessageCard';\nimport Footer from './components/Footer';\nimport CategoryFilter from './components/CategoryFilter';\nimport FavoritesList from './components/FavoritesList';\nimport { messageService } from './services/api';\nimport { useMessageCounter } from './hooks/useMessageCounter';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentMessage, setCurrentMessage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [categories, setCategories] = useState([]);\n  const [selectedCategory, setSelectedCategory] = useState('');\n  const [showFavorites, setShowFavorites] = useState(false);\n  const {\n    count,\n    incrementCounter\n  } = useMessageCounter();\n\n  // 페이지 로드 시 초기 메시지 가져오기\n  useEffect(() => {\n    const fetchInitial = async () => {\n      setLoading(true);\n      try {\n        const message = await messageService.getRandomMessage();\n        setCurrentMessage(message);\n        incrementCounter();\n      } catch (error) {\n        console.error('초기 메시지 로딩 실패:', error);\n      }\n      setLoading(false);\n    };\n    const loadCategories = async () => {\n      try {\n        const categoryList = await messageService.getCategories();\n        setCategories(categoryList);\n      } catch (error) {\n        console.error('카테고리 로딩 실패:', error);\n      }\n    };\n    fetchInitial();\n    loadCategories();\n  }, []); // dependency array를 빈 배열로 변경\n\n  const fetchNewMessage = async () => {\n    setLoading(true);\n    try {\n      const filters = {};\n      if (selectedCategory) filters.category = selectedCategory;\n      const message = await messageService.getRandomMessage(filters);\n      setCurrentMessage(message);\n      incrementCounter();\n    } catch (error) {\n      console.error('새 메시지 로딩 실패:', error);\n    }\n    setLoading(false);\n  };\n  const handleShare = () => {\n    // 공유 완료 후 추가 로직이 필요한 경우\n  };\n  const handleSpeak = () => {\n    // 음성 재생 완료 후 추가 로직이 필요한 경우\n  };\n  const handleFavorite = message => {\n    // 즐겨찾기 기능 구현\n    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\n    const isAlreadyFavorite = favorites.some(fav => fav.id === message.id);\n    if (!isAlreadyFavorite) {\n      favorites.push(message);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      alert('즐겨찾기에 추가되었습니다!');\n    } else {\n      alert('이미 즐겨찾기에 추가된 메시지입니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen gradient-bg\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8 max-w-4xl\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        messageCount: count,\n        onShowFavorites: () => setShowFavorites(true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"mb-12\",\n        children: [/*#__PURE__*/_jsxDEV(CategoryFilter, {\n          categories: categories,\n          selectedCategory: selectedCategory,\n          onCategoryChange: setSelectedCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MessageCard, {\n          message: currentMessage,\n          onNewMessage: fetchNewMessage,\n          loading: loading,\n          onShare: handleShare,\n          onSpeak: handleSpeak,\n          onFavorite: handleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FavoritesList, {\n        isOpen: showFavorites,\n        onClose: () => setShowFavorites(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"z0oqbk4HoaG2Dr6XPX6TkMlMTI4=\", false, function () {\n  return [useMessageCounter];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","MessageCard","Footer","CategoryFilter","FavoritesList","messageService","useMessageCounter","jsxDEV","_jsxDEV","App","_s","currentMessage","setCurrentMessage","loading","setLoading","categories","setCategories","selectedCategory","setSelectedCategory","showFavorites","setShowFavorites","count","incrementCounter","fetchInitial","message","getRandomMessage","error","console","loadCategories","categoryList","getCategories","fetchNewMessage","filters","category","handleShare","handleSpeak","handleFavorite","favorites","JSON","parse","localStorage","getItem","isAlreadyFavorite","some","fav","id","push","setItem","stringify","alert","className","children","messageCount","onShowFavorites","fileName","_jsxFileName","lineNumber","columnNumber","onCategoryChange","onNewMessage","onShare","onSpeak","onFavorite","isOpen","onClose","_c","$RefreshReg$"],"sources":["C:/Develop/unble/daily-start-messages/morning-app-react/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport MessageCard from './components/MessageCard';\r\nimport Footer from './components/Footer';\r\nimport CategoryFilter from './components/CategoryFilter';\r\nimport FavoritesList from './components/FavoritesList';\r\nimport { messageService } from './services/api';\r\nimport { useMessageCounter } from './hooks/useMessageCounter';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [currentMessage, setCurrentMessage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [categories, setCategories] = useState([]);\r\n  const [selectedCategory, setSelectedCategory] = useState('');\r\n  const [showFavorites, setShowFavorites] = useState(false);\r\n  const { count, incrementCounter } = useMessageCounter();\r\n\r\n  // 페이지 로드 시 초기 메시지 가져오기\r\n  useEffect(() => {\r\n    const fetchInitial = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const message = await messageService.getRandomMessage();\r\n        setCurrentMessage(message);\r\n        incrementCounter();\r\n      } catch (error) {\r\n        console.error('초기 메시지 로딩 실패:', error);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    const loadCategories = async () => {\r\n      try {\r\n        const categoryList = await messageService.getCategories();\r\n        setCategories(categoryList);\r\n      } catch (error) {\r\n        console.error('카테고리 로딩 실패:', error);\r\n      }\r\n    };\r\n\r\n    fetchInitial();\r\n    loadCategories();\r\n  }, []); // dependency array를 빈 배열로 변경\r\n\r\n  const fetchNewMessage = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const filters = {};\r\n      if (selectedCategory) filters.category = selectedCategory;\r\n      \r\n      const message = await messageService.getRandomMessage(filters);\r\n      setCurrentMessage(message);\r\n      incrementCounter();\r\n    } catch (error) {\r\n      console.error('새 메시지 로딩 실패:', error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleShare = () => {\r\n    // 공유 완료 후 추가 로직이 필요한 경우\r\n  };\r\n\r\n  const handleSpeak = () => {\r\n    // 음성 재생 완료 후 추가 로직이 필요한 경우\r\n  };\r\n\r\n  const handleFavorite = (message) => {\r\n    // 즐겨찾기 기능 구현\r\n    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\r\n    const isAlreadyFavorite = favorites.some(fav => fav.id === message.id);\r\n    \r\n    if (!isAlreadyFavorite) {\r\n      favorites.push(message);\r\n      localStorage.setItem('favorites', JSON.stringify(favorites));\r\n      alert('즐겨찾기에 추가되었습니다!');\r\n    } else {\r\n      alert('이미 즐겨찾기에 추가된 메시지입니다.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen gradient-bg\">\r\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\r\n        <Header \r\n          messageCount={count} \r\n          onShowFavorites={() => setShowFavorites(true)}\r\n        />\r\n        \r\n        <main className=\"mb-12\">\r\n          <CategoryFilter\r\n            categories={categories}\r\n            selectedCategory={selectedCategory}\r\n            onCategoryChange={setSelectedCategory}\r\n          />\r\n          \r\n          <MessageCard\r\n            message={currentMessage}\r\n            onNewMessage={fetchNewMessage}\r\n            loading={loading}\r\n            onShare={handleShare}\r\n            onSpeak={handleSpeak}\r\n            onFavorite={handleFavorite}\r\n          />\r\n        </main>\r\n\r\n        <Footer />\r\n        \r\n        <FavoritesList \r\n          isOpen={showFavorites}\r\n          onClose={() => setShowFavorites(false)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM;IAAEuB,KAAK;IAAEC;EAAiB,CAAC,GAAGhB,iBAAiB,CAAC,CAAC;;EAEvD;EACAP,SAAS,CAAC,MAAM;IACd,MAAMwB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/BT,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,MAAMU,OAAO,GAAG,MAAMnB,cAAc,CAACoB,gBAAgB,CAAC,CAAC;QACvDb,iBAAiB,CAACY,OAAO,CAAC;QAC1BF,gBAAgB,CAAC,CAAC;MACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACvC;MACAZ,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,MAAMc,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,YAAY,GAAG,MAAMxB,cAAc,CAACyB,aAAa,CAAC,CAAC;QACzDd,aAAa,CAACa,YAAY,CAAC;MAC7B,CAAC,CAAC,OAAOH,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACrC;IACF,CAAC;IAEDH,YAAY,CAAC,CAAC;IACdK,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClCjB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,MAAMkB,OAAO,GAAG,CAAC,CAAC;MAClB,IAAIf,gBAAgB,EAAEe,OAAO,CAACC,QAAQ,GAAGhB,gBAAgB;MAEzD,MAAMO,OAAO,GAAG,MAAMnB,cAAc,CAACoB,gBAAgB,CAACO,OAAO,CAAC;MAC9DpB,iBAAiB,CAACY,OAAO,CAAC;MAC1BF,gBAAgB,CAAC,CAAC;IACpB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACtC;IACAZ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,MAAMoB,WAAW,GAAGA,CAAA,KAAM;IACxB;EAAA,CACD;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB;EAAA,CACD;EAED,MAAMC,cAAc,GAAIZ,OAAO,IAAK;IAClC;IACA,MAAMa,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC;IACvE,MAAMC,iBAAiB,GAAGL,SAAS,CAACM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKrB,OAAO,CAACqB,EAAE,CAAC;IAEtE,IAAI,CAACH,iBAAiB,EAAE;MACtBL,SAAS,CAACS,IAAI,CAACtB,OAAO,CAAC;MACvBgB,YAAY,CAACO,OAAO,CAAC,WAAW,EAAET,IAAI,CAACU,SAAS,CAACX,SAAS,CAAC,CAAC;MAC5DY,KAAK,CAAC,gBAAgB,CAAC;IACzB,CAAC,MAAM;MACLA,KAAK,CAAC,sBAAsB,CAAC;IAC/B;EACF,CAAC;EAED,oBACEzC,OAAA;IAAK0C,SAAS,EAAC,0BAA0B;IAAAC,QAAA,eACvC3C,OAAA;MAAK0C,SAAS,EAAC,uCAAuC;MAAAC,QAAA,gBACpD3C,OAAA,CAACR,MAAM;QACLoD,YAAY,EAAE/B,KAAM;QACpBgC,eAAe,EAAEA,CAAA,KAAMjC,gBAAgB,CAAC,IAAI;MAAE;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC,eAEFjD,OAAA;QAAM0C,SAAS,EAAC,OAAO;QAAAC,QAAA,gBACrB3C,OAAA,CAACL,cAAc;UACbY,UAAU,EAAEA,UAAW;UACvBE,gBAAgB,EAAEA,gBAAiB;UACnCyC,gBAAgB,EAAExC;QAAoB;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvC,CAAC,eAEFjD,OAAA,CAACP,WAAW;UACVuB,OAAO,EAAEb,cAAe;UACxBgD,YAAY,EAAE5B,eAAgB;UAC9BlB,OAAO,EAAEA,OAAQ;UACjB+C,OAAO,EAAE1B,WAAY;UACrB2B,OAAO,EAAE1B,WAAY;UACrB2B,UAAU,EAAE1B;QAAe;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eAEPjD,OAAA,CAACN,MAAM;QAAAoD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAEVjD,OAAA,CAACJ,aAAa;QACZ2D,MAAM,EAAE5C,aAAc;QACtB6C,OAAO,EAAEA,CAAA,KAAM5C,gBAAgB,CAAC,KAAK;MAAE;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/C,EAAA,CA1GQD,GAAG;EAAA,QAM0BH,iBAAiB;AAAA;AAAA2D,EAAA,GAN9CxD,GAAG;AA4GZ,eAAeA,GAAG;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}