{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8005';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000\n});\nexport const messageService = {\n  // 랜덤 메시지 가져오기\n  async getRandomMessage(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      if (filters.category) params.append('category', filters.category);\n      if (filters.time_of_day) params.append('time_of_day', filters.time_of_day);\n      if (filters.season) params.append('season', filters.season);\n      const response = await api.get(`/messages/random?${params}`);\n      return response.data;\n    } catch (error) {\n      console.error('메시지 조회 실패:', error);\n      // 폴백 메시지\n      return {\n        id: 'fallback',\n        text: '오늘도 새로운 기회가 당신을 기다리고 있습니다. 🌅',\n        author: '모닝팀',\n        category: '새로운 시작',\n        source: 'fallback'\n      };\n    }\n  },\n  // 메시지 통계\n  async getStats() {\n    try {\n      const response = await api.get('/messages/stats');\n      return response.data;\n    } catch (error) {\n      console.error('통계 조회 실패:', error);\n      return {\n        total_messages: 0,\n        by_category: {},\n        by_source: {}\n      };\n    }\n  },\n  // 카테고리 목록\n  async getCategories() {\n    try {\n      const response = await api.get('/messages/categories');\n      return response.data.categories;\n    } catch (error) {\n      console.error('카테고리 조회 실패:', error);\n      return ['새로운 시작', '동기부여', '자신감', '성장'];\n    }\n  },\n  // 헬스 체크\n  async checkHealth() {\n    try {\n      const response = await api.get('/health');\n      return response.data;\n    } catch (error) {\n      console.error('헬스 체크 실패:', error);\n      return {\n        status: 'unhealthy'\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","messageService","getRandomMessage","filters","params","URLSearchParams","category","append","time_of_day","season","response","get","data","error","console","id","text","author","source","getStats","total_messages","by_category","by_source","getCategories","categories","checkHealth","status"],"sources":["C:/Develop/unble/daily-start-messages/morning-app-react/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8005';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 10000,\r\n});\r\n\r\nexport const messageService = {\r\n  // 랜덤 메시지 가져오기\r\n  async getRandomMessage(filters = {}) {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      if (filters.category) params.append('category', filters.category);\r\n      if (filters.time_of_day) params.append('time_of_day', filters.time_of_day);\r\n      if (filters.season) params.append('season', filters.season);\r\n      \r\n      const response = await api.get(`/messages/random?${params}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('메시지 조회 실패:', error);\r\n      // 폴백 메시지\r\n      return {\r\n        id: 'fallback',\r\n        text: '오늘도 새로운 기회가 당신을 기다리고 있습니다. 🌅',\r\n        author: '모닝팀',\r\n        category: '새로운 시작',\r\n        source: 'fallback'\r\n      };\r\n    }\r\n  },\r\n\r\n  // 메시지 통계\r\n  async getStats() {\r\n    try {\r\n      const response = await api.get('/messages/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('통계 조회 실패:', error);\r\n      return { total_messages: 0, by_category: {}, by_source: {} };\r\n    }\r\n  },\r\n\r\n  // 카테고리 목록\r\n  async getCategories() {\r\n    try {\r\n      const response = await api.get('/messages/categories');\r\n      return response.data.categories;\r\n    } catch (error) {\r\n      console.error('카테고리 조회 실패:', error);\r\n      return ['새로운 시작', '동기부여', '자신감', '성장'];\r\n    }\r\n  },\r\n\r\n  // 헬스 체크\r\n  async checkHealth() {\r\n    try {\r\n      const response = await api.get('/health');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('헬스 체크 실패:', error);\r\n      return { status: 'unhealthy' };\r\n    }\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAG;EAC5B;EACA,MAAMC,gBAAgBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACnC,IAAI;MACF,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;MACpC,IAAIF,OAAO,CAACG,QAAQ,EAAEF,MAAM,CAACG,MAAM,CAAC,UAAU,EAAEJ,OAAO,CAACG,QAAQ,CAAC;MACjE,IAAIH,OAAO,CAACK,WAAW,EAAEJ,MAAM,CAACG,MAAM,CAAC,aAAa,EAAEJ,OAAO,CAACK,WAAW,CAAC;MAC1E,IAAIL,OAAO,CAACM,MAAM,EAAEL,MAAM,CAACG,MAAM,CAAC,QAAQ,EAAEJ,OAAO,CAACM,MAAM,CAAC;MAE3D,MAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,oBAAoBP,MAAM,EAAE,CAAC;MAC5D,OAAOM,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClC;MACA,OAAO;QACLE,EAAE,EAAE,UAAU;QACdC,IAAI,EAAE,+BAA+B;QACrCC,MAAM,EAAE,KAAK;QACbX,QAAQ,EAAE,QAAQ;QAClBY,MAAM,EAAE;MACV,CAAC;IACH;EACF,CAAC;EAED;EACA,MAAMC,QAAQA,CAAA,EAAG;IACf,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,iBAAiB,CAAC;MACjD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC,OAAO;QAAEO,cAAc,EAAE,CAAC;QAAEC,WAAW,EAAE,CAAC,CAAC;QAAEC,SAAS,EAAE,CAAC;MAAE,CAAC;IAC9D;EACF,CAAC;EAED;EACA,MAAMC,aAAaA,CAAA,EAAG;IACpB,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,sBAAsB,CAAC;MACtD,OAAOD,QAAQ,CAACE,IAAI,CAACY,UAAU;IACjC,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnC,OAAO,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC;IACxC;EACF,CAAC;EAED;EACA,MAAMY,WAAWA,CAAA,EAAG;IAClB,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,SAAS,CAAC;MACzC,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjC,OAAO;QAAEa,MAAM,EAAE;MAAY,CAAC;IAChC;EACF;AACF,CAAC;AAED,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}