{"ast":null,"code":"var _jsxFileName = \"C:\\\\Develop\\\\unble\\\\daily-start-messages\\\\morning-app-react\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport MessageCard from './components/MessageCard';\nimport Footer from './components/Footer';\nimport { messageService } from './services/api';\nimport { useMessageCounter } from './hooks/useMessageCounter';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentMessage, setCurrentMessage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [apiStatus, setApiStatus] = useState(null);\n  const {\n    count,\n    incrementCounter\n  } = useMessageCounter();\n\n  // 페이지 로드 시 초기 메시지 가져오기\n  useEffect(() => {\n    fetchInitialMessage();\n    checkApiHealth();\n  }, []);\n  const fetchInitialMessage = async () => {\n    setLoading(true);\n    try {\n      const message = await messageService.getRandomMessage();\n      setCurrentMessage(message);\n      incrementCounter();\n    } catch (error) {\n      console.error('초기 메시지 로딩 실패:', error);\n    }\n    setLoading(false);\n  };\n  const fetchNewMessage = async () => {\n    setLoading(true);\n    try {\n      const message = await messageService.getRandomMessage();\n      setCurrentMessage(message);\n      incrementCounter();\n    } catch (error) {\n      console.error('새 메시지 로딩 실패:', error);\n    }\n    setLoading(false);\n  };\n  const checkApiHealth = async () => {\n    try {\n      const health = await messageService.checkHealth();\n      const stats = await messageService.getStats();\n      setApiStatus({\n        status: health.status === 'healthy' ? 'healthy' : 'unhealthy',\n        message_count: stats.total_messages\n      });\n    } catch (error) {\n      setApiStatus({\n        status: 'unhealthy',\n        message_count: 0\n      });\n    }\n  };\n  const handleShare = () => {\n    // 공유 완료 후 추가 로직이 필요한 경우\n  };\n  const handleSpeak = () => {\n    // 음성 재생 완료 후 추가 로직이 필요한 경우\n  };\n  const handleFavorite = message => {\n    // 즐겨찾기 기능 구현\n    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\n    const isAlreadyFavorite = favorites.some(fav => fav.id === message.id);\n    if (!isAlreadyFavorite) {\n      favorites.push(message);\n      localStorage.setItem('favorites', JSON.stringify(favorites));\n      alert('즐겨찾기에 추가되었습니다!');\n    } else {\n      alert('이미 즐겨찾기에 추가된 메시지입니다.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen gradient-bg\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container mx-auto px-4 py-8 max-w-4xl\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        messageCount: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"mb-12\",\n        children: /*#__PURE__*/_jsxDEV(MessageCard, {\n          message: currentMessage,\n          onNewMessage: fetchNewMessage,\n          loading: loading,\n          onShare: handleShare,\n          onSpeak: handleSpeak,\n          onFavorite: handleFavorite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {\n        apiStatus: apiStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0wh4fSbJqONwxSFmdP1v9vOYw4I=\", false, function () {\n  return [useMessageCounter];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","MessageCard","Footer","messageService","useMessageCounter","jsxDEV","_jsxDEV","App","_s","currentMessage","setCurrentMessage","loading","setLoading","apiStatus","setApiStatus","count","incrementCounter","fetchInitialMessage","checkApiHealth","message","getRandomMessage","error","console","fetchNewMessage","health","checkHealth","stats","getStats","status","message_count","total_messages","handleShare","handleSpeak","handleFavorite","favorites","JSON","parse","localStorage","getItem","isAlreadyFavorite","some","fav","id","push","setItem","stringify","alert","className","children","messageCount","fileName","_jsxFileName","lineNumber","columnNumber","onNewMessage","onShare","onSpeak","onFavorite","_c","$RefreshReg$"],"sources":["C:/Develop/unble/daily-start-messages/morning-app-react/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './components/Header';\r\nimport MessageCard from './components/MessageCard';\r\nimport Footer from './components/Footer';\r\nimport { messageService } from './services/api';\r\nimport { useMessageCounter } from './hooks/useMessageCounter';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [currentMessage, setCurrentMessage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [apiStatus, setApiStatus] = useState(null);\r\n  const { count, incrementCounter } = useMessageCounter();\r\n\r\n  // 페이지 로드 시 초기 메시지 가져오기\r\n  useEffect(() => {\r\n    fetchInitialMessage();\r\n    checkApiHealth();\r\n  }, []);\r\n\r\n  const fetchInitialMessage = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const message = await messageService.getRandomMessage();\r\n      setCurrentMessage(message);\r\n      incrementCounter();\r\n    } catch (error) {\r\n      console.error('초기 메시지 로딩 실패:', error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const fetchNewMessage = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const message = await messageService.getRandomMessage();\r\n      setCurrentMessage(message);\r\n      incrementCounter();\r\n    } catch (error) {\r\n      console.error('새 메시지 로딩 실패:', error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  const checkApiHealth = async () => {\r\n    try {\r\n      const health = await messageService.checkHealth();\r\n      const stats = await messageService.getStats();\r\n      setApiStatus({\r\n        status: health.status === 'healthy' ? 'healthy' : 'unhealthy',\r\n        message_count: stats.total_messages\r\n      });\r\n    } catch (error) {\r\n      setApiStatus({\r\n        status: 'unhealthy',\r\n        message_count: 0\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleShare = () => {\r\n    // 공유 완료 후 추가 로직이 필요한 경우\r\n  };\r\n\r\n  const handleSpeak = () => {\r\n    // 음성 재생 완료 후 추가 로직이 필요한 경우\r\n  };\r\n\r\n  const handleFavorite = (message) => {\r\n    // 즐겨찾기 기능 구현\r\n    const favorites = JSON.parse(localStorage.getItem('favorites') || '[]');\r\n    const isAlreadyFavorite = favorites.some(fav => fav.id === message.id);\r\n    \r\n    if (!isAlreadyFavorite) {\r\n      favorites.push(message);\r\n      localStorage.setItem('favorites', JSON.stringify(favorites));\r\n      alert('즐겨찾기에 추가되었습니다!');\r\n    } else {\r\n      alert('이미 즐겨찾기에 추가된 메시지입니다.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen gradient-bg\">\r\n      <div className=\"container mx-auto px-4 py-8 max-w-4xl\">\r\n        <Header messageCount={count} />\r\n        \r\n        <main className=\"mb-12\">\r\n          <MessageCard\r\n            message={currentMessage}\r\n            onNewMessage={fetchNewMessage}\r\n            loading={loading}\r\n            onShare={handleShare}\r\n            onSpeak={handleSpeak}\r\n            onFavorite={handleFavorite}\r\n          />\r\n        </main>\r\n\r\n        <Footer apiStatus={apiStatus} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}